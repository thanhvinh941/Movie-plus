input {
    jdbc {
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL_DB03}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        tracking_column => "unix_ts_in_secs"
        use_column_value => true
        tracking_column_type => "numeric"
        schedule => "*/5 * * * * *"
        statement => "SELECT 
                        id,
                        description,
                        duration_min,
                        movie_name,
                        movie_sub_name, 
                        banners,
                        UNIX_TIMESTAMP(update_time) AS unix_ts_in_secs
                    FROM
                        movie_info
                    WHERE 
                        (UNIX_TIMESTAMP(update_time) > :sql_last_value AND update_time < NOW()) ORDER BY update_time ASC"
    }
}

filter {
    jdbc_streaming {
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL_DB03}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        statement =>"SELECT 
                        genre_id, display_name
                    FROM
                        movie_genre mg
                            JOIN
                        genre_type gt ON mg.genre_id = gt.id
                    WHERE
                        mg.del_flg = 0
                        AND gt.del_flg = 0
                            AND movie_id = :movieId"
        parameters => { "movieId" => "id"}
        target => "genre_type"
    }

    jdbc_streaming {
        jdbc_driver_library => "${LOGSTASH_JDBC_DRIVER_JAR_LOCATION}"
        jdbc_driver_class => "${LOGSTASH_JDBC_DRIVER}"
        jdbc_connection_string => "${LOGSTASH_JDBC_URL_DB03}"
        jdbc_user => "${LOGSTASH_JDBC_USERNAME}"
        jdbc_password => "${LOGSTASH_JDBC_PASSWORD}"
        statement =>"SELECT 
                        trailer_title, trailer_url
                    FROM
                        movie_trailer
                    WHERE
                        del_flg = 0
                            AND movie_id = :movieId"
        parameters => { "movieId" => "id"}
        target => "trailer"
    }

    mutate {
        split => { "banners" => "," }
        copy => { "id" => "[@metadata][_id]"}
        remove_field => ["id", "@version", "unix_ts_in_secs"]
    }

}

output {
    elasticsearch {
        hosts => ["${LOGSTASH_ELASTICSEARCH_HOST}"]
        index => "movie_index"
        ilm_enabled => false
        action => "index"
        doc_as_upsert => true
        document_id => "%{[@metadata][_id]}"
    }
    stdout { codec => json_lines }
}